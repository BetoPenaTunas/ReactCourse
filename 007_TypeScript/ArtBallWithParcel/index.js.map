{"mappings":";;;ACAA,EAA4D,AAA5D,0DAA4D;AACxD,EAA8C,AAA9C,4CAA8C;AAC9C,EAAuD,AAAvD,qDAAuD;AACvD,KAA4B,WAAtB,4BAAM,OAAC,wBAAE,QAAC,yBAAG,QAAC,yBAAG,QAAC,yBAAG,MAAG,IAAI;AAClC,KAAK,CAAC,8BAAQ,GAAC,CAAC,GAAC,wBAAE,AAAC,CAA2C,AAA3C,EAA2C,AAA3C,yCAA2C;;AAE/D,KAAK,CAAC,yCAAiB,IAAE,MAAa,GAAG,CAAC;IACtC,KAAK,CAAC,MAAM,GAAC,4BAAM,KAAG,8BAAQ,AAAC,CAAsB,AAAtB,EAAsB,AAAtB,qBAAsB;;;QAC7C,CAAC,EAAC,MAAM,GAAC,yBAAG,CAAC,MAAM;QAAG,CAAC,EAAC,MAAM,GAAC,yBAAG,CAAC,MAAM;KAAG,CAAwC,AAAxC,EAAwC,AAAxC,sCAAwC;;AAChG,CAAC;;;ADPL,EAAoD,AAApD,kDAAoD;AAEpD,KAAK,QAAE,yBAAG,MAAE,IAAI;AAChB,KAAK,CAAC,4BAAM,GAAG,QAAQ,CAAC,cAAc,EAAC,OAAS;AAEhD,EAA6B,AAA7B,2BAA6B;AAC7B,4BAAM,CAAC,KAAK,GAAC,4BAAM,CAAC,WAAW;AAC/B,4BAAM,CAAC,MAAM,GAAC,4BAAM,CAAC,YAAY;AAEjC,KAAK,UAAE,2BAAK,WAAC,4BAAM,MAAI,4BAAM;AAE7B,EAAsB,AAAtB,oBAAsB;AACtB,EAAqC,AAArC,oCAAsC;AACrC,KAAI,CAAC,4BAAM,GAAE,GAAG,GAAC,yBAAG,CAAC,2BAAK,EAAC,4BAAM,IAAG,CAAC;AACtC,KAAK,CAAC,6BAAO,GAAE,4BAAM,CAAC,UAAU,EAAC,EAAI;AAErC,EAAsB,AAAtB,qBAAsB;AACtB,KAAK,CAAC,0BAAI,IAAI,EAAS,EAAC,EAAS,EAAC,EAAS,EAAC,EAAS,GAAG,CAAC;IACrD,KAA+B,EAAzB,EAAE,EAAC,EAAE;QAAG,2BAAK,GAAC,CAAC;QAAC,4BAAM,GAAC,CAAC;;IAC9B,6BAAO,CAAC,SAAS;IACjB,6BAAO,CAAC,MAAM,CAAC,EAAE,GAAC,EAAE,EAAC,EAAE,GAAC,EAAE;IAC1B,6BAAO,CAAC,MAAM,CAAC,EAAE,GAAC,EAAE,EAAC,EAAE,GAAC,EAAE;IAC1B,6BAAO,CAAC,MAAM;AAClB,CAAC;AAED,KAAK,CAAC,0BAAI,OAAM,CAAC;IACb,KAAK,GAAE,CAAC,EAAC,EAAE,GAAC,CAAC,EAAC,EAAE,MAAE,yCAAiB,CAAC,4BAAM;IAC1C,KAAK,GAAE,CAAC,EAAC,EAAE,GAAC,CAAC,EAAC,EAAE,MAAE,yCAAiB,CAAC,4BAAM;IAC1C,0BAAI,CAAC,EAAE,EAAC,EAAE,EAAC,EAAE,EAAC,EAAE;AACpB,CAAC;AAED,EAAgD,AAAhD,8CAAgD;IAC5C,GAAG,CAAC,CAAC,GAAC,CAAC,EAAC,IAAI,GAAC,CAAC,EAAC,EAAE,GAAC,EAAE,EAAC,CAAC,GAAC,IAAK,IAAG,CAAC,EAAC,IAAI,IAAE,EAAE,CACzC,UAAU,CAAC,0BAAI,EAAC,IAAI","sources":["code/app.ts","code/randomCircle.ts"],"sourcesContent":["import \"./main.css\";\r\nimport {randomPointCircle} from \"./randomCircle\"\r\n// import{randomPointInCircle} from \"./randomCircle\"\r\n\r\nconst {min}=Math\r\nconst canvas = document.getElementById('drawing') as HTMLCanvasElement\r\n\r\n// ---> Para darle calidad HD\r\ncanvas.width=canvas.clientWidth\r\ncanvas.height=canvas.clientHeight\r\n\r\nconst {width,height} = canvas\r\n\r\n//Calculando el radio \r\n//0.8 de la cosa más chiquita sobre 2\r\nconst radius=(0.8*min(width,height))/2  \r\nconst context =canvas.getContext(\"2d\")\r\n\r\n//Dibujando la línea, \r\nconst draw = (x1:number,y1:number,x2:number,y2:number)=>{\r\n    const[dx,dy]=[width/2,height/2]\r\n    context.beginPath()\r\n    context.moveTo(dx+x1,dy-y1)\r\n    context.lineTo(dx+x2,dy-y2)\r\n    context.stroke()\r\n}\r\n\r\nconst loop =()=>{\r\n    const {x:x1,y:y1}=randomPointCircle(radius)\r\n    const {x:x2,y:y2}=randomPointCircle(radius)\r\n    draw(x1,y1,x2,y2)\r\n}\r\n\r\n//Mando a llamar a setTimeOut() cada 30 segundos\r\nfor(let i=0,time=0,dt=30;i<5_000;++i,time+=dt){\r\n    setTimeout(loop,time)\r\n}","//---> HACIENDO OBJECT DESTRUCTURING con el objeto Math <---\r\n    //Es decir, obteniendo algunas propiedades de \r\n    //Algunas propiedades son funciones y otras CONSTANTES \r\n    const{random,PI,min,cos,sin} =Math\r\n    const maxValue=2*PI //2pi= Lo que mide una circunferencia 2PI  \r\n\r\n    const randomPointCircle=(radius:number)=>{\r\n        const angle1=random()*maxValue //Ángulo entre 0 y 2PI\r\n        return {x:radius*cos(angle1), y:radius*sin(angle1)} //Convirtiendo a coordenadas cartesianas\r\n    }\r\n\r\n    export{randomPointCircle}"],"names":[],"version":3,"file":"index.js.map"}